Class :- a class is blueprint which is no existence in the real world 
class is having the behaviour and state of an object


========================================
Inheritance :- when a child class can access the methods of the parent class which is not defined in child class
//it is done via extend keyword

// a method can be access via higher modifier not by lower modifier while Overriding like if a method is default and we are overrriding that method in child class than we can also make
it public 

//we can not create object of the abstract class
// a class can only be abstract or final because final says it can not be inherited and abstract says must be inherited
//a child class can be final
===============================================================

Annoatation :- which is used to define the information about the object.
it is used because it changes the behaivour of the object because it is compiled by the jvm

****JAVAP P is a print
=========================================================================
Overloading ->Static(Compile Time) Early Binding 
1.Same method name with diff signature(parameter)
2.with or without inheritance
3.return type is not considered in signature 

Overriding -> Dynamic(Run time) Late binding

1.same method name with same signature
2.Inheritance is must
3.while overriding we can give same or higher access

=======================================================================

Constructor Overloading:-
 

//when we call a constructor the first constructor is called is child class constructor is called first
//if we write a super() in child constructor we know that which constructor is to be called 
//if we don't write

//no argument constructor is generated by us bt it does not have any argument 
// in  default contructor it has super() method 
// this will call the current class constructor bt super will call parent class constructor
// this or super can only be written in the first line that is the rule in the constructor
// we can not write this without parameter in no argument constructor because it will recursively call itself

//derfault
Child()
{
super();
}

***DEFAULT IS ALSO KNOWN AS PACKAGE PRIVATE
========================================================================
init() :- it is an intitalizer method that gives default values to the instance variable and this is automatically generated at compile time

 
=======================================================================
public static void main(String []args)
//if we give no arguemnt to args the array will be empty not null because in stack args has the address or reference so if it does not have the address it will be null  

=======================================================================
interface :-
in interface all the methods are abstract
//in interface all methods are by default public so in any class we can not give lower access to the method while overriding because 
while overriding we can give same or higher access so it is mandatory to give public access to method while overriding
//we can not create the object of interface and abstract class bt we can give reference of them
// we can only call those mehod which are overridden in class through the reference of parent that's why we create the reference of child class



=====================================================================
// when we compile an interface it will also create a class file

//without creating the object collection we can also 
//you want to enforce that the will do those things 
 
==========================================================================
anonamous class :- it is a kind of inner class

==========================================================================
try with resources was added in jdk 7 because we have java.io.Closeable interface internally
//we can also have try block without catch or finally is possible in jdk 8
//resource :- file or database connection 
//in finally we write those functionality that we want to release

//Scalability :- how many user can connect with the how much clients
//Systantic sugar :- where we write minimum bt it work more

//JODA API in Date and time api the feature of java 8


========================================================================

try :- 
catch :- 
throw :- 
throws :-
finally:-

========================================================================
c/c++

1.Source code(.c/.cpp)
2.Compile(.obj)(Machine Code)
3. Linker(.exe)
4. Loader load exe into RAM(process)
5.Execution(CPU)(Thread)

java
1.Source Code(.java)
2.Compile(.class)(byte code)
3.JIT(native code)

========================================================================
// we can throw any exception
//the checked exceptions must be catched or throws
//
=======================================================================

static :-
//static member maintain the copy for the class
//not static  member ,instance,feild,data member ,state variable maintain the copy for object
//static variables can also initialize in constructor bt this is not useful because we can call the static variable through the class bt a constructor can only be called after the object creation
//so sttic variables are initialize only in static blocks or initializer
//if we want to do coding for initializing then we need constructor
like we want the data from the database


rules :-

error line :- can also be named as sqiggly